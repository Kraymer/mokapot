#!/bin/bash


usage ()
{
    echo "USAGE: pmu [OPTIONS] git_br|git_co|git_st|pg|ps
Trigger actions on top of unix commands using percol interactive selection

MODE
    git_br      delete local branches that have been merged
    git_sh      apply action (add, stash, restore) to locally modified files
    git_co      apply action (add, stash, restore) to locally modified files
    psql        drop postgres databases
    pgrep       kill processes

OPTIONS
    The options are passed to the underlying binary (eg 'git' for 'moka git')"
    exit 0
}


# Detect if given string is a git message meaning no percol selection
is_git_no_selection_msg() {
    strings=(
        "nothing to commit, working tree clean"  # git status
        "Your branch is up to date with"         # git checkout
    )
    for i in "${strings[@]}"; do
        if [[ "$1" == "$i"* ]]; then
            echo 0
            return
        fi
    done
    echo 1
}

# Prompt what to do with files reported by the command as modified.
# $1 - git subcommand
git_wrapper() {

    while :
    do
        lines=$(git "$@" | percol --auto-fail --initial-index=last --prompt="SELECT FILES")
	    lines=$(echo $lines)

        if [ -n "$lines" ]; then
            stop=$(is_git_no_selection_msg "${lines}")
            if [[ "$stop" == 0 ]]; then
                return 0
            fi

            lines=$(echo "$lines" | awk '{print $2;}')
            git diff --cached $lines
            git diff $lines
            echo ""
            read -n 1 -p "Press one key to continue" answer
            command=$(echo "git add $lines
git restore $lines
git stash push -m '${lines##*/}' -- $lines
git restore --staged $lines" | percol)
            echo $command
            eval ${command}
        else
            return 0
        fi
    done
}

git_status() {
    git_wrapper status
}

git_checkout() {
    if [ -n "$(git status --porcelain)" ]; then
      git_wrapper status
    fi
    git_wrapper checkout $1
}

main() {
    if [ $# -eq 0 ]
    then
        usage;
    fi

    case $1 in
        -h|--help)
            usage
            ;;
        git_br)
            git branch -D $(git branch --merged | percol | awk '{print $1;}')
            ;;
        git_st)
            git_status
            ;;
        git_co)
            git_checkout "$2"
            ;;
        psql)
            psql -U postgres -tl|cut -d'|' -f 1| percol --prompt "DATABASES TO DELETE"| awk '{print $1;}'| xargs -L 1 -t dropdb -U postgres
            ;;
        pgrep)
            pgrep -fa $2 | percol --prompt "PROCESSES TO KILL" | awk '{ print $1 }' | xargs kill
            ;;
        * ) usage;;
    esac

}
main "$@"
