#!/bin/bash


usage ()
{
    echo "USAGE: pmu git_br|git_co|git_st|pg|ps
Trigger actions on top of unix commands using percol interactive selection

MODE
    git_br      delete local branches that have been merged
    git_co      apply action to locally modified files on checkout command
    git_lg      copy selected commit SHA1 to clipboard
    git_st      apply action to locally modified files on status command
    psql        drop postgres databases
    pgrep       kill processes"

    exit 0
}


# Detect if given string is a git message meaning no percol selection
is_git_no_selection_msg() {
    strings=(
        "nothing to commit, working tree clean"  # git status
        "Your branch is up to date with"         # git checkout
        "no changes added to commit"             # git checkout
    )
    for i in "${strings[@]}"; do
        if [[ "$1" == "$i"* ]]; then
            echo 0
            return
        fi
    done
    echo 1
}

# Prompt what to do with files reported by the command as modified.
# $1 - git subcommand
git_wrapper() {

    while :
    do
        lines=$(git "$@" | percol --initial-index=last --prompt="SELECT FILES")
	    lines=$(echo "${lines}")

        if [ -n "${lines}" ]; then
            stop=$(is_git_no_selection_msg "${lines}")
            if [[ "$stop" == 0 ]]; then
                return 0
            fi

            lines=$(echo "${lines}" | cut -f 2 -d ":")
            git diff --cached $lines
            git diff $lines
            echo ""
            read -n 1 -p "Press one key to continue" answer
            lines=$(echo "${lines}" | tr '\r\n' '')
            command=$(echo "git add $lines
git restore $lines
git stash push -m '${lines##*/}' -- $lines
git restore --staged $lines" | percol)
            echo $command
            eval ${command}
        else
            return 0
        fi
    done
}

git_status() {
    git_wrapper status
}

git_checkout() {
    if [ -n "$(git status --porcelain)" ]; then
      git_wrapper status
    fi
    git_wrapper checkout $1
}

git_log() {
    sha1=$(git log |bin/percol --select-ignore "^(?!commit ).*"| cut -f 2 -d " " | cut -c -7)
    echo ${sha1} copied to clipboard
    echo ${sha1} | xclip
}

main() {
    if [ $# -eq 0 ]
    then
        usage;
    fi

    case $1 in
        -h|--help)
            usage
            ;;
        git_br)
            git branch -D $(git branch --merged | percol | awk '{print $1;}')
            ;;
        git_st)
            git_status
            ;;
        git_co)
            git_checkout "$2"
            ;;
        git_lg)
            git_log
            ;;
        psql)
            psql -U postgres -tl|cut -d'|' -f 1| percol --prompt "DATABASES TO DELETE"| awk '{print $1;}'| xargs -L 1 -t dropdb -U postgres
            ;;
        pgrep)
            pgrep -fa $2 | percol --prompt "PROCESSES TO KILL" | awk '{ print $1 }' | xargs kill
            ;;
        * ) usage;;
    esac

}
main "$@"
